/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package summative;

import java.awt.Color;
import java.awt.Graphics;
import java.util.ArrayList;
import java.util.Random;
import static javax.swing.JFrame.EXIT_ON_CLOSE;

/**
 *
 * @author sodny7936
 */
public class GUIForm extends javax.swing.JFrame implements Runnable{
    
    //Variables
    
    int mode = 2;
    boolean dead = false;
    Random r = new Random();
    int numBoids = 0;
    int numPreds = 0;
    ArrayList<Boid> animals = new ArrayList();
    ArrayList<Boid> predators = new ArrayList();
    int radius = 5;
    int di = radius *2;
    double boidVlim = 5;
    double predVlim = 8;
    Thread animator;
    boolean paused = false;
    
    double flockingVar = 100;
    double collisionVar = 5;
    double velocityVar = 100;
    double frightVar = 5;
    double boidRange = 200;
    
    double massVar = 50;
    double closestVar = 10;
    double collisionVarP = 5;
    double predRange = 500;
    /**
     * Creates new form GUIForm
     */
    public GUIForm() {
        initComponents();
        animator = new Thread( this );
        animator.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainScreen = new javax.swing.JPanel();
        Resume = new javax.swing.JButton();
        velocityMatchingSlider = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        collisionAvoidanceSlider = new javax.swing.JSlider();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        flockingSlider = new javax.swing.JSlider();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        numBoidsBox = new javax.swing.JTextField();
        numPredsBox = new javax.swing.JTextField();
        startButton = new javax.swing.JButton();
        frightSlider = new javax.swing.JSlider();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        boidRangeSlider = new javax.swing.JSlider();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        boidRangeSlider1 = new javax.swing.JSlider();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        massAttSlider = new javax.swing.JSlider();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        closestSlider = new javax.swing.JSlider();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        collisionPSlider = new javax.swing.JSlider();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        predRangeSlider = new javax.swing.JSlider();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        predSpeedSlider = new javax.swing.JSlider();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jToggleButton1 = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainScreen.setPreferredSize(new java.awt.Dimension(600, 600));

        javax.swing.GroupLayout mainScreenLayout = new javax.swing.GroupLayout(mainScreen);
        mainScreen.setLayout(mainScreenLayout);
        mainScreenLayout.setHorizontalGroup(
            mainScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 990, Short.MAX_VALUE)
        );
        mainScreenLayout.setVerticalGroup(
            mainScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );

        Resume.setText("Pause");
        Resume.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResumeActionPerformed(evt);
            }
        });

        velocityMatchingSlider.setMaximum(-1);
        velocityMatchingSlider.setMinimum(-150);
        velocityMatchingSlider.setValue(-100);
        velocityMatchingSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                velocityMatchingSliderStateChanged(evt);
            }
        });

        jLabel1.setText("Min");

        jLabel2.setText("Max");

        jLabel3.setText("Max");

        jLabel4.setText("Min");

        collisionAvoidanceSlider.setMaximum(-1);
        collisionAvoidanceSlider.setMinimum(-30);
        collisionAvoidanceSlider.setValue(-5);
        collisionAvoidanceSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                collisionAvoidanceSliderStateChanged(evt);
            }
        });

        jLabel5.setText("Max");

        jLabel6.setText("Min");

        flockingSlider.setMaximum(-20);
        flockingSlider.setMinimum(-1000);
        flockingSlider.setValue(-100);
        flockingSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                flockingSliderStateChanged(evt);
            }
        });

        jLabel7.setText("Flocking");

        jLabel8.setText("Collision Avoidance");

        jLabel9.setText("Velocity Matching");

        jLabel19.setFont(new java.awt.Font("Ravie", 1, 24)); // NOI18N
        jLabel19.setText("Boids Simulator!");

        jLabel20.setText("Boids");

        jLabel21.setText("Predators");

        numBoidsBox.setText("0");

        numPredsBox.setText("0");

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        frightSlider.setMaximum(-1);
        frightSlider.setMinimum(-50);
        frightSlider.setValue(-5);
        frightSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                frightSliderStateChanged(evt);
            }
        });

        jLabel22.setText("Min");

        jLabel23.setText("Max");

        jLabel24.setText("Predator Fright");

        boidRangeSlider.setMaximum(1000);
        boidRangeSlider.setMinimum(0);
        boidRangeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                boidRangeSliderStateChanged(evt);
            }
        });

        jLabel25.setText("Min");

        jLabel26.setText("Max");

        jLabel27.setText("View Range");

        boidRangeSlider1.setMaximum(50);
        boidRangeSlider1.setValue(5);
        boidRangeSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                boidRangeSlider1StateChanged(evt);
            }
        });

        jLabel28.setText("Min");

        jLabel29.setText("Max");

        jLabel30.setText("Speed Limit");

        massAttSlider.setMaximum(-1);
        massAttSlider.setMinimum(-100);
        massAttSlider.setToolTipText("");
        massAttSlider.setValue(-50);
        massAttSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                massAttSliderStateChanged(evt);
            }
        });

        jLabel31.setText("Min");

        jLabel32.setText("Max");

        jLabel33.setText("Attraction Towards Masses");

        closestSlider.setMaximum(-1);
        closestSlider.setMinimum(-75);
        closestSlider.setValue(-10);
        closestSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                closestSliderStateChanged(evt);
            }
        });

        jLabel34.setText("Min");

        jLabel35.setText("Max");

        jLabel36.setText("Attraction Towards Closest Boid");

        collisionPSlider.setMaximum(-1);
        collisionPSlider.setMinimum(-50);
        collisionPSlider.setValue(-5);
        collisionPSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                collisionPSliderStateChanged(evt);
            }
        });

        jLabel37.setText("Min");

        jLabel38.setText("Max");

        jLabel39.setText("Collision Avoidance");

        predRangeSlider.setMaximum(1000);
        predRangeSlider.setValue(500);
        predRangeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                predRangeSliderStateChanged(evt);
            }
        });

        jLabel40.setText("Min");

        jLabel41.setText("Max");

        jLabel42.setText("View Range");

        predSpeedSlider.setMaximum(50);
        predSpeedSlider.setValue(8);
        predSpeedSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                predSpeedSliderStateChanged(evt);
            }
        });

        jLabel43.setText("Min");

        jLabel44.setText("Max");

        jLabel45.setText("Speed Limit");

        jToggleButton1.setText("Mode 1");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 43, Short.MAX_VALUE)
                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(77, 77, 77)
                                .addComponent(jLabel8))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel22)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(frightSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel23))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel25)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(boidRangeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel26))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel28)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(boidRangeSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel29))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel34)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(closestSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel35))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel21)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(numPredsBox, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel37)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(collisionPSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel38))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel40)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(predRangeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel41))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel43)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(predSpeedSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel44))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(71, 71, 71)
                                        .addComponent(jLabel9))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(76, 76, 76)
                                        .addComponent(jLabel24))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(92, 92, 92)
                                        .addComponent(jLabel27))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(86, 86, 86)
                                        .addComponent(jLabel30))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel31)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(massAttSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel32))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(velocityMatchingSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel2))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(57, 57, 57)
                                        .addComponent(Resume)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(startButton))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(56, 56, 56)
                                        .addComponent(jLabel39))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(79, 79, 79)
                                        .addComponent(jLabel42))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(83, 83, 83)
                                        .addComponent(jLabel45))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(22, 22, 22)
                                        .addComponent(jLabel36))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(98, 98, 98)
                                                .addComponent(jLabel7))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel6)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(flockingSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel5))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel20)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(numBoidsBox, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(50, 50, 50)
                                                .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel4)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(collisionAvoidanceSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jLabel3)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(85, 85, 85)
                                .addComponent(jLabel33)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(mainScreen, javax.swing.GroupLayout.DEFAULT_SIZE, 990, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(numBoidsBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(flockingSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(collisionAvoidanceSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(velocityMatchingSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel24)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(frightSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23)
                    .addComponent(jLabel22))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel27)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(boidRangeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26)
                    .addComponent(jLabel25))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel30)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(boidRangeSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel29)
                    .addComponent(jLabel28))
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(numPredsBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel33)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(massAttSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel32)
                    .addComponent(jLabel31))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel36)
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(closestSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel35)
                    .addComponent(jLabel34))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel39)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(collisionPSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel38)
                    .addComponent(jLabel37))
                .addGap(18, 18, 18)
                .addComponent(jLabel42)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(predRangeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel41)
                    .addComponent(jLabel40))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel45)
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(predSpeedSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel44)
                    .addComponent(jLabel43))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Resume)
                    .addComponent(startButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(mainScreen, javax.swing.GroupLayout.PREFERRED_SIZE, 1000, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(95, 95, 95))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ResumeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResumeActionPerformed
        //Pauses or resumes the sim
        if ( animator == null ) { //if the animation is currently paused...
            
            //...then restart the animation (because the button's label was "Resume" when the user clicked it just now)
            animator = new Thread( this ); //restarts the Thread object that keeps the animation loop going in the run() method below
            animator.start();
            Resume.setText( "Pause" );
            paused = false;
        }
        
        else {  //if the animation is currently running...
            
            //...then stop the animation (because the button's label was "Pause" when the user clicked it just now)
            animator = null; //kills the Thread object, which interrupts the animation loop in the run() method below
            Resume.setText( "Resume" );
            paused = true;
        }        
    }//GEN-LAST:event_ResumeActionPerformed
   
    private void flockingSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_flockingSliderStateChanged
        flockingVar = -1*flockingSlider.getValue();
    }//GEN-LAST:event_flockingSliderStateChanged

    private void collisionAvoidanceSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_collisionAvoidanceSliderStateChanged
        collisionVar = -1*collisionAvoidanceSlider.getValue();
    }//GEN-LAST:event_collisionAvoidanceSliderStateChanged

    private void velocityMatchingSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_velocityMatchingSliderStateChanged
        velocityVar = -1*velocityMatchingSlider.getValue();
    }//GEN-LAST:event_velocityMatchingSliderStateChanged

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        clear();
        numBoids = Integer.parseInt( this.numBoidsBox.getText() );
        numPreds = Integer.parseInt( this.numPredsBox.getText() );
        initializePositions();
        animator = new Thread( this );  
        animator.start();
    }//GEN-LAST:event_startButtonActionPerformed

    private void frightSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_frightSliderStateChanged
        frightVar = -1*frightSlider.getValue();
    }//GEN-LAST:event_frightSliderStateChanged

    private void boidRangeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_boidRangeSliderStateChanged
        boidRange = boidRangeSlider.getValue();
    }//GEN-LAST:event_boidRangeSliderStateChanged

    private void boidRangeSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_boidRangeSlider1StateChanged
        boidVlim = boidRangeSlider1.getValue();
    }//GEN-LAST:event_boidRangeSlider1StateChanged

    private void massAttSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_massAttSliderStateChanged
        massVar = -1*massAttSlider.getValue();
    }//GEN-LAST:event_massAttSliderStateChanged

    private void closestSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_closestSliderStateChanged
        closestVar = -1*closestSlider.getValue();
    }//GEN-LAST:event_closestSliderStateChanged

    private void collisionPSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_collisionPSliderStateChanged
        collisionVarP = -1*collisionPSlider.getValue();
    }//GEN-LAST:event_collisionPSliderStateChanged

    private void predRangeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_predRangeSliderStateChanged
        predRange = predRangeSlider.getValue();
    }//GEN-LAST:event_predRangeSliderStateChanged

    private void predSpeedSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_predSpeedSliderStateChanged
        predVlim = predSpeedSlider.getValue();
    }//GEN-LAST:event_predSpeedSliderStateChanged

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        //sets to mode 1 or 2
        if (jToggleButton1.getText().equals("Mode 2")) {
            mode = 2;
            jToggleButton1.setText("Mode 1");
        }
        else {
            mode = 1;
            jToggleButton1.setText("Mode 2");
        }
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    
    public void clear() {//clears the screen of boids and preds
        Graphics g = mainScreen.getGraphics();
        g.setColor(Color.white);
        g.fillRect(0, 0, 1000, 1000);
        animals.clear();
        predators.clear();
    }
    
    public void initializePositions() {//sets random positions for boids and preds
        for (int i = 0; i < numBoids; i++) {
            animals.add(new Boid(r.nextInt(1000),r.nextInt(1000)));
        }
        for (int i = 0; i < numPreds; i++) {
            predators.add(new Boid(r.nextInt(1000),r.nextInt(1000)));
        }
    }
    
    public double getDist(double x1,double x2,double y1,double y2) {//distance between points
        return Math.sqrt(Math.pow(x1-x2,2)+Math.pow(y1-y2,2));
    }
    
    //gets the vector used by a boid in the next frame
    public Vector animalV(int i) {
        int num = 0;
        Vector v1 = new Vector(0,0);
        Vector v2 = new Vector(0,0);
        Vector v3 = new Vector(0,0);
        Vector v4 = new Vector(0,0);
        Vector v5 = new Vector(0,0);
        Vector q;
        Vector an = new Vector(animals.get(i).xPos,animals.get(i).yPos);
        Vector ot;
        for (int j = 0; j < predators.size(); j++) {
            double d2 = getDist(predators.get(j).xPos,animals.get(i).xPos,predators.get(j).yPos,animals.get(i).yPos);
            //if boid is within 15 units of a pred, it is eliminated
            if (d2 <= 15) {
                dead = true;
                return new Vector(0,0);
            }
            //vector away from predator within view range
            else if (d2 <= boidRange) {
                v4 = v4.subtract(new Vector(predators.get(j).xPos,predators.get(j).yPos).subtract(an));
            }
        }
        for (int j = 0; j < animals.size(); j++) {
            if (j != i) {
                double d1 = getDist(animals.get(j).xPos,animals.get(i).xPos,animals.get(j).yPos,animals.get(i).yPos);
                ot = new Vector(animals.get(j).xPos,animals.get(j).yPos);
                if (d1 <= boidRange) {
                    num++;
                    v1 = v1.add(ot);//adding up positions of other boids
                    if (d1 <= 20) {
                        v2 = v2.subtract(ot.subtract(an));//prevents collision
                    }
                    v3 = v3.add(animals.get(j).v);//matches velocity
                }
            }
        }
        if (num !=0) {
            v1 = v1.divide(num);//dividing positions by number of boids for average position
        }
        else {
            v1 = new Vector(500,500);//if no nearby boids, go towards centre
        }
        //vector to keep boids on screen
        if (mode == 1) {
            if (animals.get(i).xPos > 1000) {
                v5.xPart -= boidVlim;
            }
            else if (animals.get(i).xPos < 0) {
                v5.xPart += boidVlim;
            }
            if (animals.get(i).yPos > 1000) {
                v5.yPart -= boidVlim;
            }
            else if (animals.get(i).yPos < 0) {
                v5.yPart += boidVlim;
            }
        }
        //uses variables to control behavior
        v1 = (v1.subtract(an)).divide(flockingVar);
        v2 = v2.divide(collisionVar);
        v3 = v3.divide(velocityVar);
        v4 = v4.divide(frightVar);
        v5 = v5.divide(10);
        q = v1.add(v2).add(v3).add(v4).add(v5).add(animals.get(i).v);
        if (q.magnitude() > boidVlim) {
            q = (q.divide(q.magnitude())).divide(1/boidVlim);
        }
        return q;
    }
    
    //gets vector used by pred in next frame
    public Vector predatorV(int i) {
        int num = 0;
        Vector v1 = new Vector(0,0);
        Vector v2 = new Vector(0,0);
        Vector v3 = new Vector(0,0);
        Vector v4 = new Vector(0,0);
        Vector q;
        Vector an = new Vector(predators.get(i).xPos,predators.get(i).yPos);
        for (int j = 0; j < predators.size(); j++) {
            if (j != i) {
                //prevents collision
                if (getDist(predators.get(j).xPos,predators.get(i).xPos,predators.get(j).yPos,predators.get(i).yPos) <= 20) {
                    v2 = v2.subtract(new Vector(predators.get(j).xPos,predators.get(j).yPos).subtract(an));
                }
            }
        }
        double d;
        int min = 0;
        double minD = 1000;
        for (int j = 0; j < animals.size(); j++) {
            d = getDist(animals.get(j).xPos,predators.get(i).xPos,animals.get(j).yPos,predators.get(i).yPos);
            if (d <= predRange) {
                    num++;
                    v1 = v1.add(new Vector(animals.get(j).xPos,animals.get(j).yPos));//adding positions of all boids
                    if (d < minD) {//find closest boid
                        min = j;
                        minD = d;
                    }
                }
        }
        if (num !=0) {
            v1 = v1.divide(num);//get avg position of nearby boids
            v3 = new Vector(animals.get(min).xPos,animals.get(min).yPos).subtract(an);//vector to closest boid
        }
        else {
            v1 = new Vector(500,500);//if no nearby boids, go to centre
        }
        //keeps preds on screen
        if (mode == 1) {
            if (predators.get(i).xPos > 1000) {
                v4.xPart -= predVlim;
            }
            else if (predators.get(i).xPos < 0) {
                v4.xPart += predVlim;
            }
            if (predators.get(i).yPos > 1000) {
                v4.yPart -= predVlim;
            }
            else if (predators.get(i).yPos < 0) {
                v4.yPart += predVlim;
            }
        }
        //uses variables to control behavior
        v1 = (v1.subtract(an)).divide(massVar);
        v2 = v2.divide(collisionVarP);
        v3 = v3.divide(closestVar);
        v4 = v4.divide(10);
        q = v1.add(v2).add(v3).add(v4).add(predators.get(i).v);
        if (q.magnitude() > predVlim) {
            q = (q.divide(q.magnitude())).divide(1/predVlim);
        }
        return q;
    }
    
    //update positions of boids and preds
    public void updatePositions() {
        for (int i = 0; i < animals.size(); i++) {
            animals.get(i).v = animalV(i);
            if (dead) { //remove boid from arraylist if dead
                animals.remove(i);
                i--;
                dead = false;
                continue;
            }
            //keeps boids on screen using mode 2
            if (mode == 2) {
                if (animals.get(i).xPos > 1000) {
                    animals.get(i).xPos -= 1000;
                }
                if (animals.get(i).xPos < 0) {
                    animals.get(i).xPos += 1000;
                }
                if (animals.get(i).yPos > 1000) {
                    animals.get(i).yPos -= 1000;
                }
                if (animals.get(i).yPos < 0) {
                    animals.get(i).yPos += 1000;
                }
            }
            //add vector to current position for next position
            animals.get(i).xPos += animals.get(i).v.xPart;
            animals.get(i).yPos += animals.get(i).v.yPart;
        }
        for (int i = 0; i < predators.size(); i++) {
            if (mode == 2) {
                if (predators.get(i).xPos > 1000) {
                    predators.get(i).xPos -= 1000;
                }
                if (predators.get(i).xPos < 0) {
                    predators.get(i).xPos += 1000;
                }
                if (predators.get(i).yPos > 1000) {
                    predators.get(i).yPos -= 1000;
                }
                if (predators.get(i).yPos < 0) {
                    predators.get(i).yPos += 1000;
                }
            }
            predators.get(i).v = predatorV(i);
            predators.get(i).xPos += predators.get(i).v.xPart;
            predators.get(i).yPos += predators.get(i).v.yPart;
        }
    }
    
    public void draw() {//draws preds and boids
        Graphics g = mainScreen.getGraphics();
        g.setColor(Color.white);
        g.fillRect(0, 0, 1000, 1000);
        g.setColor(Color.black);
        for (int i = 0; i < animals.size(); i++) {
            g.fillOval((int)animals.get(i).xPos-radius,(int)animals.get(i).yPos-radius,di,di);
        }
        g.setColor(Color.red);
        for (int i = 0; i < predators.size(); i++) {
            g.fillOval((int)predators.get(i).xPos-radius*2,(int)predators.get(i).yPos-radius*2,di*2,di*2);
        }
    }
    
    public static void sleep(int duration) {
        try {
            Thread.sleep( duration );
        } 
        catch (Exception e) {}
    }
    
    public void run() {
        
        //this while-loop runs the Game of Life animation
        while( Thread.currentThread() == animator ) {  //This while-condition becomes false when the user clicks the Pause
                                                       //button, and becomes true again when the user clicks the Resume button.
            sleep( 20 );
            if (!paused) {
                updatePositions();
            }
            draw();
        }
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GUIForm gf = new GUIForm();
                gf.setDefaultCloseOperation(EXIT_ON_CLOSE);
                gf.setVisible(true);
                gf.draw();;
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Resume;
    private javax.swing.JSlider boidRangeSlider;
    private javax.swing.JSlider boidRangeSlider1;
    private javax.swing.JSlider closestSlider;
    private javax.swing.JSlider collisionAvoidanceSlider;
    private javax.swing.JSlider collisionPSlider;
    private javax.swing.JSlider flockingSlider;
    private javax.swing.JSlider frightSlider;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JPanel mainScreen;
    private javax.swing.JSlider massAttSlider;
    private javax.swing.JTextField numBoidsBox;
    private javax.swing.JTextField numPredsBox;
    private javax.swing.JSlider predRangeSlider;
    private javax.swing.JSlider predSpeedSlider;
    private javax.swing.JButton startButton;
    private javax.swing.JSlider velocityMatchingSlider;
    // End of variables declaration//GEN-END:variables
}
